Despite having made a lot of progress, there's still tons of work to do!

* Update README + add bibliographic refs.

* In the simulator: DONE!

* In the processor (hardware-level)
  * add special-purpose operations (mod60, etc.) in ALU
    (don't use LUTs, use combinational circuits!)
    + corresponding control signals
  * handle output signals for synchronization + display
  * tweak parameters to fit requirements from the microprogram
  * Fix the problem about readtemp

* Microcode-level:
  * Code a microassembler (Haskell EDSL?) -> Mostly OK
  * Write microprogram -> WIP
  * ???
  * Profit!

* Netlist compilation + hot code swapping?
  * This seems to be in limbo for now...


Note about overflow bit for ALU:

when adding: overflow iff last carry = 1
when subtracting: n - k ~ n + (2^p - k)
  carry = 1 iff 2^p + n - k >= 2^p iff n - k >= 0 iff n >= k
  overflow (into negative numbers) iff k > n
  therefore: overflow iff carry = 0 (!)
  --> compute overflow bit = carry XOR switch between + and -
   

